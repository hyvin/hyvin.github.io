<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Hyvin's Notepad]]></title>
  <link href="http://hyvin.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://hyvin.github.io/"/>
  <updated>2014-05-02T21:39:40+03:00</updated>
  <id>http://hyvin.github.io/</id>
  <author>
    <name><![CDATA[Hyvin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Direct and indirect eval call]]></title>
    <link href="http://hyvin.github.io/blog/2014/05/02/direct-and-indirect-eval-call/"/>
    <updated>2014-05-02T00:49:09+03:00</updated>
    <id>http://hyvin.github.io/blog/2014/05/02/direct-and-indirect-eval-call</id>
    <content type="html"><![CDATA[<p>今天看到javascript design pattern中关于如何  <a href="https://github.com/shichuan/javascript-patterns/blob/master/general-patterns/access-to-global-object.html">access global object</a>, 代码如下：
```javascript
var global = (function () {</p>

<pre><code>            return this || (1, eval)('this');
        }());
</code></pre>

<p><code>``
这代码的意思是无论在non-strict mode和strict mode都可以拿到global这个对象。但是</code>(1, eval)(&lsquo;this&rsquo;)`这行代码究竟是什么写法，对1到底代表什么非常不解，stackoverflow上面有说是这行代码表示indirect eval call，而direct和indirect eval的区别是direct的this是指闭包的this，indirect的this则是全局的this就好像这个方程是在全局被调用一样。还是没解释（1，eval）这种写法到底是什么意思，于是又分别读到了<a href="http://perfectionkills.com/global-eval-what-are-the-options/">全局eval</a>、JavaScript: The definitive guide的<a href="https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-4/evaluation-expressions">4.12</a>章和<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.2">js的符号及术语</a>的定义。</p>

<p>找了半天，原来和<code>，</code>在js的定义有关（大汗。。。）：</p>

<blockquote><p>The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.</p></blockquote>

<p>意思是：<code>，</code>逗号会从左到右evaluate每个运算对象，返回最后一个运算对象的值。所以（1,eval）还是返回了eval。至于究竟是直接还是间接调用，ES5对直接eval的定义： “eval” in CallExpression should be a Reference, not a value。</p>

<p>于是又涉及到一个名词：CallExpression，和一个问题：怎么判断eval是reference还是value？</p>

<p>先看什么是CallExpression：
```</p>

<p>  (     1        ,         eval  )        ( &lsquo;1+1&rsquo; )</p>

<pre><code> |____|   |_____|    |_____|
 Literal  Operator   Identifier

 |_________________________|
 Expression
</code></pre>

<p>  |______________________________|
  PrimaryExpression</p>

<p>  |<strong><strong><strong><strong>______________________|        |</strong></strong></strong></strong>|
  MemberExpression                        Arguments</p>

<p>  |________________________________________________|
  CallExpression
<code>
reference还是value？
先看几个例子
</code>javascript
 (((eval)))(); //直接
 (1,eval)(); // 间接
 (eval = eval)(); // 间接
<code>``
原因是在ES5定义里，</code>，<code>和</code>=<code>这类操作符会执行运算对象的</code>GetValue<code>方法，而 Grouping Operator —</code>( )` 不会evaluate传入的expression，如果传入的是reference则整个括号内内容不变，将还是一个reference。</p>

<p>再看上面提到<code>GetValue</code>这个玩意儿。根据官方文档：
GetValue (V)</p>
]]></content>
  </entry>
  
</feed>
